{"version":3,"sources":["Infobox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["Infobox","title","cases","active","isRed","isGreen","isCoral","total","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setcountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15240c7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Infobox.css\";\r\nimport {Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction Infobox({title,cases,active,isRed, isGreen, isCoral, total, ...props}) {\r\n    return (\r\n        <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n          isRed && \"infoBox--red\"\r\n        } ${isGreen && \"infoBox--green\"} ${isCoral && \"infoBox--coral\"}`}\r\n      >\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {title}\r\n          </Typography>\r\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n            {cases}\r\n          </h2>\r\n  \r\n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n            {total} Total\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Infobox\r\n\r\n\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n\r\nexport const sortData = (data) => {\r\n\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) => {\r\n        if(a.cases > b.cases){\r\n         return -1;   \r\n        }\r\n        else{\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className = \"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries,casesType, center, zoom}) {\r\n    return (\r\n      <div className=\"map\">\r\n        <LeafletMap center={center} zoom={zoom}>\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          {showDataOnMap(countries, casesType)}\r\n        </LeafletMap>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className = \"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong> {numeral (cases).format(\"0,0\") } </strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType = \"cases\", ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className = {props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n     \r\n\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport{\n  MenuItem,FormControl,Select, Card,CardContent\n} from \"@material-ui/core\";\nimport Infobox from './Infobox';\nimport Map from './Map';\nimport Table from './Table';\nimport './Table.css';\nimport {sortData,prettyPrintStat} from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport numeral from \"numeral\";\nfunction App() {\n \n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setcountryInfo] =  useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat : 34.80746, lng : -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then ((response) => response.json()) \n    .then ((data) => {\n      setcountryInfo(data);\n    });\n  }, []);\n  \n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n   \n    getCountriesData();\n    \n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n        await fetch (url)\n          .then ((response) => response.json())\n          .then ((data) => {\n              setCountry(countryCode);\n              setcountryInfo(data);\n\n              setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n              setMapZoom(4);\n              \n          });\n  };\n\n  console.log('Country INFO >>>',countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}> {country.name} </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <Infobox\n            isCoral\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <Infobox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <Infobox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}